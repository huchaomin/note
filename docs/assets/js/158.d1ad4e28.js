(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{665:function(t,e,n){"use strict";n.r(e);var a=n(7),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ul",[n("li",[t._v("React 事件的命名采用小驼峰式（camelCase），而不是纯小写。")]),t._v(" "),n("li",[t._v("使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//html\n<button onclick="activateLasers()">\n  Activate Lasers\n</button>\n//jsx\n<button onClick={activateLasers}>\n  Activate Lasers\n</button>\n')])])]),n("ul",[n("li",[t._v("不能通过返回 false 的方式阻止默认行为。你必须显式的使用 preventDefault 。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//html\n<a href="#" onclick="console.log(\'The link was clicked.\'); return false">\n   Click me\n</a>\n//react\nclass ClickMe extends React.Component{\n   handleClick (e){\n       e.preventDefault()\n       console.log(\'The link was clicked.\')\n   }\n   render (){\n       return (\n           <a href="#" onClick={handleClick}>\n               Click me\n           </a>\n       )\n   }\n}\n')])])]),n("h2",{attrs:{id:"注意回调中的this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意回调中的this"}},[t._v("#")]),t._v(" 注意回调中的this")]),t._v(" "),n("h5",{attrs:{id:"bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" bind")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // 为了在回调中使用 `this`，这个绑定是必不可少的\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n")])])]),n("h5",{attrs:{id:"class-fields-实验性的语法-【create-react-app-默认启用此语法】"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-fields-实验性的语法-【create-react-app-默认启用此语法】"}},[t._v("#")]),t._v(" class fields(实验性的语法)【Create React App 默认启用此语法】")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class LoggingButton extends React.Component {\n  // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n  // 注意: 这是 *实验性* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n")])])]),n("h5",{attrs:{id:"在回调中使用箭头函数-避免使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在回调中使用箭头函数-避免使用"}},[t._v("#")]),t._v(" 在回调中使用箭头函数(避免使用)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n")])])]),n("h2",{attrs:{id:"向事件处理传递参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#向事件处理传递参数"}},[t._v("#")]),t._v(" 向事件处理传递参数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n//e必须显式的进行传递\n\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n//事件对象e以及更多的参数将会被隐式的进行传递。\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);