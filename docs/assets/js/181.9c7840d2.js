(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{688:function(n,e,p){"use strict";p.r(e);var r=p(7),o=Object(r.a)({},(function(){var n=this,e=n.$createElement,p=n._self._c||e;return p("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[p("blockquote",[p("p",[n._v("自 React v15.5 起，React.PropTypes 已移入另一个包中。请使用 prop-types 库 代替。")])]),n._v(" "),p("p",[p("strong",[n._v("propTypes 仅在开发模式下进行检查。")])]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[n._v("import PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n//当props.name不为string时，JavaScript 控制台将会显示警告。\n")])])]),p("h2",{attrs:{id:"proptypes"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#proptypes"}},[n._v("#")]),n._v(" PropTypes")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[n._v("import PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // 你可以将属性声明为 JS 原生类型，默认情况下\n  // 这些属性都是可选的。\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何可被渲染的元素（包括数字、字符串、元素或数组）\n  // (或 Fragment) 也包含这些类型。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 一个 React 元素类型（即，MyComponent）。\n  optionalElementType: PropTypes.elementType,\n\n  // 你也可以声明 prop 为类的实例，这里使用\n  // JS 的 instanceof 操作符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以让你的 prop 只能是特定的值，指定它为\n  // 枚举类型。\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是几种类型中的任意一个类型\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 可以指定一个数组由某一类型的元素组成\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 可以指定一个对象由某一类型的值组成\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 可以指定一个对象由特定的类型值组成\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n  \n  // An object with warnings on extra properties\n  optionalObjectWithStrictShape: PropTypes.exact({\n    name: PropTypes.string,\n    quantity: PropTypes.number\n  }),   \n\n  // 你可以在任何 PropTypes 属性后面加上 `isRequired` ，确保\n  // 这个 prop 没有被提供时，会打印警告信息。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任意类型的数据\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你可以指定一个自定义验证器。它在验证失败时应返回一个 Error 对象。\n  // 请不要使用 `console.warn` 或抛出异常，因为这在 `onOfType` 中不会起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 你也可以提供一个自定义的 `arrayOf` 或 `objectOf` 验证器。\n  // 它应该在验证失败时返回一个 Error 对象。\n  // 验证器将验证数组或对象中的每个值。验证器的前两个参数\n  // 第一个是数组或对象本身\n  // 第二个是他们当前的键。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n")])])]),p("h2",{attrs:{id:"限制单个元素"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#限制单个元素"}},[n._v("#")]),n._v(" 限制单个元素")]),n._v(" "),p("p",[n._v("可以通过 PropTypes.element 来确保传递给组件的 children 中只包含一个元素。")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[n._v("import PropTypes from 'prop-types';\n\nclass MyComponent extends React.Component {\n  render() {\n    // 这必须只有一个元素，否则控制台会打印警告。\n    const children = this.props.children;\n    return (\n      <div>\n        {children}\n      </div>\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired    //只包含一个元素且必须\n};\n")])])]),p("h2",{attrs:{id:"默认-prop-值"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#默认-prop-值"}},[n._v("#")]),n._v(" 默认 Prop 值")]),n._v(" "),p("div",{staticClass:"language- extra-class"},[p("pre",{pre:!0,attrs:{class:"language-text"}},[p("code",[n._v("class Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\n// 指定 props 的默认值：\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n\n// 渲染出 \"Hello, Stranger\"：\nReactDOM.render(\n  <Greeting />,\n  document.getElementById('example')\n);\n")])])]),p("p",[p("strong",[n._v("propTypes 类型检查发生在 defaultProps 赋值后，所以类型检查也适用于 defaultProps。")])])])}),[],!1,null,null,null);e.default=o.exports}}]);