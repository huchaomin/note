(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{753:function(t,e,a){"use strict";a.r(e);var r=a(7),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"browserrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#browserrouter"}},[t._v("#")]),t._v(" BrowserRouter")]),t._v(" "),a("p",[t._v("使用 HTML5 提供的 history API (pushState, replaceState 和 popstate 事件) 来保持 UI 和 URL 的同步。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { BrowserRouter } from 'react-router-dom';\n\n<BrowserRouter\n  basename={string}\n  forceRefresh={bool}\n  getUserConfirmation={func}\n  keyLength={number}\n>\n  <App />\n</BrowserRouter>\n")])])]),a("h5",{attrs:{id:"basename-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basename-string"}},[t._v("#")]),t._v(" basename: string")]),t._v(" "),a("ul",[a("li",[t._v("所有位置的基准 URL。")]),t._v(" "),a("li",[t._v("如果你的应用程序部署在服务器的子目录，则需要将其设置为子目录。")]),t._v(" "),a("li",[t._v("正确格式是前面有一个前导斜杠，但不能有尾部斜杠。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<BrowserRouter basename="/calendar">\n  <Link to="/today" />\n</BrowserRouter>\n')])])]),a("p",[t._v("最终将被呈现为")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<a href="/calendar/today" />\n')])])]),a("h5",{attrs:{id:"forcerefresh-bool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forcerefresh-bool"}},[t._v("#")]),t._v(" forceRefresh: bool")]),t._v(" "),a("ul",[a("li",[t._v("如果为 true ，在导航的过程中整个页面将会刷新。")]),t._v(" "),a("li",[t._v("一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const supportsHistory = 'pushState' in window.history;\n<BrowserRouter forceRefresh={!supportsHistory} />\n")])])]),a("h5",{attrs:{id:"getuserconfirmation-func"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getuserconfirmation-func"}},[t._v("#")]),t._v(" getUserConfirmation: func")]),t._v(" "),a("ul",[a("li",[t._v("用于确认导航的函数，默认使用 window.confirm")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 这是默认的确认函数\nconst getConfirmation = (message, callback) => {\n  const allowTransition = window.confirm(message);\n  callback(allowTransition);\n}\n\n<BrowserRouter getUserConfirmation={getConfirmation} />\n")])])]),a("h5",{attrs:{id:"keylength-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keylength-number"}},[t._v("#")]),t._v(" keyLength: number")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<BrowserRouter keyLength={12} />\n")])])]),a("h2",{attrs:{id:"hashrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashrouter"}},[t._v("#")]),t._v(" HashRouter")]),t._v(" "),a("p",[t._v("使用 URL 的 hash 部分（即 window.location.hash）来保持 UI 和 URL 的同步。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { HashRouter } from 'react-router-dom';\n\n<HashRouter\n    basename={string}\n    getUserConfirmation={func}\n    hashType={string}\n>\n  <App />\n</HashRouter>\n")])])]),a("blockquote",[a("p",[t._v("注意： 使用 hash 记录导航历史不支持 location.key 和 location.state。在以前的版本中，我们视图 shim 这种行为，但是仍有一些问题我们无法解决。任何依赖此行为的代码或插件都将无法正常使用。由于该技术仅用于支持旧式（低版本）浏览器，因此对于一些新式浏览器，我们鼓励你使用 BrowserHistory 代替。")])]),t._v(" "),a("h5",{attrs:{id:"hashtype-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashtype-string"}},[t._v("#")]),t._v(" hashType: string")]),t._v(" "),a("p",[t._v("window.location.hash 使用的 hash 类型，有如下几种：")]),t._v(" "),a("ul",[a("li",[t._v("slash - 后面跟一个斜杠，例如 #/ 和 #/sunshine/lollipops(默认)")]),t._v(" "),a("li",[t._v("noslash - 后面没有斜杠，例如 # 和 #sunshine/lollipops")]),t._v(" "),a("li",[t._v("hashbang - Google 风格的 ajax crawlable，例如 #!/ 和 #!/sunshine/lollipops")])]),t._v(" "),a("h2",{attrs:{id:"memoryrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memoryrouter"}},[t._v("#")]),t._v(" MemoryRouter")]),t._v(" "),a("ul",[a("li",[t._v("将 URL 的历史记录保存在内存中的 Router")]),t._v(" "),a("li",[t._v("地址栏将看不到任何变化")]),t._v(" "),a("li",[t._v("在测试和非浏览器环境中很有用，例如 React Native。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { MemoryRouter } from 'react-router-dom';\n\nMemoryRouter\n  <App />\n</MemoryRouter>\n")])])]),a("h5",{attrs:{id:"initialentries-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialentries-array"}},[t._v("#")]),t._v(" initialEntries: array")]),t._v(" "),a("p",[t._v("历史堆栈中的一系列位置信息。这些可能是带有 {pathname, search, hash, state} 的完整位置对象或简单的字符串 URL。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<MemoryRouter\n  initialEntries={[ '/one', '/two', { pathname: '/three' } ]}\n  initialIndex={1}\n>\n  <App/>\n</MemoryRouter>\n")])])]),a("h5",{attrs:{id:"initialindex-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initialindex-number"}},[t._v("#")]),t._v(" initialIndex: number")]),t._v(" "),a("p",[t._v("initialEntries 数组中的初始位置索引。")]),t._v(" "),a("h5",{attrs:{id:"getuserconfirmation-func-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getuserconfirmation-func-2"}},[t._v("#")]),t._v(" getUserConfirmation: func")]),t._v(" "),a("p",[t._v("用于确认导航的函数。当 MemoryRouter 直接与 Prompt 一起使用时，你必须使用此选项。")]),t._v(" "),a("h5",{attrs:{id:"keylength-number-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keylength-number-2"}},[t._v("#")]),t._v(" keyLength: number")]),t._v(" "),a("p",[t._v("location.key 的长度，默认为 6。")]),t._v(" "),a("h2",{attrs:{id:"staticrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#staticrouter"}},[t._v("#")]),t._v(" StaticRouter")])])}),[],!1,null,null,null);e.default=s.exports}}]);