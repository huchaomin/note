(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{528:function(s,a,t){"use strict";t.r(a);var e=t(7),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("v-alert",{attrs:{color:"primary",text:"",icon:"mdi-lightbulb-multiple"}},[s._v("提示\n"),t("p",[s._v("当打包模块时，webpack 使用 enhanced-resolve 来解析文件路径")])]),s._v(" "),t("h3",{attrs:{id:"绝对路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绝对路径"}},[s._v("#")]),s._v(" 绝对路径")]),s._v(" "),t("p",[s._v("由于已经获得文件的绝对路径，因此不需要再做进一步解析")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/home/me/file'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'C:\\\\Users\\\\me\\\\file'")]),s._v("\n")])])]),t("h3",{attrs:{id:"相对路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相对路径"}},[s._v("#")]),s._v(" 相对路径")]),s._v(" "),t("p",[s._v("使用 import 或 require 的资源文件所处的目录，被认为是上下文目录。"),t("br"),s._v("\n在 import/require 中给定的相对路径，会拼接此上下文路径，来生成模块的绝对路径")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'../src/file1'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./file2'")]),s._v("\n")])])]),t("h3",{attrs:{id:"模块路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块路径"}},[s._v("#")]),s._v(" 模块路径")]),s._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'module'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'module/lib/file'")]),s._v("\n")])])]),t("ol",[t("li",[s._v("如果 package 中包含 package.json 文件，那么在 resolve.exportsFields 配置选项中指定的字段会被依次查找，\npackage.json 中的第一个字段会根据 package 导出指南确定 package 中可用的 export。")])]),s._v(" "),t("p",[s._v("一旦根据上述规则解析路径后，resolver 将会检查路径是指向文件还是文件夹。如果路径指向文件：")]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("如果文件具有扩展名，则直接将文件打包。")]),s._v(" "),t("li",[s._v("否则，将使用 resolve.extensions 选项作为文件扩展名来解析，此选项会告诉解析器在解析中能够接受那些扩展名（例如 .js，.jsx）。")])]),s._v(" "),t("p",[s._v("如果路径指向一个文件夹，则进行如下步骤寻找具有正确扩展名的文件：")]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("如果文件夹中包含 package.json 文件，则会根据 resolve.mainFields 配置中的字段顺序查找，并根据 package.json 中的符合配置要求的第一个字段来确定文件路径。")]),s._v(" "),t("li",[s._v("如果不存在 package.json 文件或 resolve.mainFields 没有返回有效路径，则会根据 resolve.mainFiles 配置选项中指定的文件名顺序查找，看是否能在 import/require 的目录下匹配到一个存在的文件名。")]),s._v(" "),t("li",[s._v("然后使用 resolve.extensions 选项，以类似的方式解析文件扩展名。")])]),s._v(" "),t("h3",{attrs:{id:"关于缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于缓存"}},[s._v("#")]),s._v(" 关于缓存")]),s._v(" "),t("p",[s._v("每次文件系统访问文件都会被缓存，以便于更快触发对同一文件的多个并行或串行请求。"),t("br"),s._v("\n在 watch 模式 下，只有修改过的文件会被从缓存中移出。如果关闭 watch 模式，则会在每次编译前清理缓存。")])],1)}),[],!1,null,null,null);a.default=r.exports}}]);