(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{721:function(e,n,t){"use strict";t.r(n);var r=t(7),a=Object(r.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("class Child extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  //本质是将父组件中的方法通过props传到子组件，然后子组件中触发\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n  \n  render() {\n    return (\n      <fieldset>\n       <legend>Enter temperature:</legend>\n        <input value={this.props.temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(temperature) {\n    this.setState({temperature});\n  }\n\n  render() {\n    return (\n      <div>\n        <Child \n          temperature={this.state.temperature}\n          onTemperatureChange={this.handleCelsiusChange} />\n        <Child\n          temperature={this.state.temperature}\n          onTemperatureChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Parent />,\n  document.getElementById('root')\n);\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);