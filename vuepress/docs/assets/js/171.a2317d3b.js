(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{731:function(t,e,s){"use strict";s.r(e);var a=s(7),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("==实际上，JSX 仅仅只是 React.createElement(component, props, ...children) 函数的语法糖。==")]),t._v(" "),s("h2",{attrs:{id:"如果没有子节点-你还可以使用自闭合的标签形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果没有子节点-你还可以使用自闭合的标签形式"}},[t._v("#")]),t._v(" 如果没有子节点，你还可以使用自闭合的标签形式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('<div className="sidebar" />\n')])])]),s("h2",{attrs:{id:"大写字母开头的-jsx-标签意味着它们是-react-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大写字母开头的-jsx-标签意味着它们是-react-组件"}},[t._v("#")]),t._v(" 大写字母开头的 JSX 标签意味着它们是 React 组件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('<CustomButton color="red" />\n')])])]),s("h2",{attrs:{id:"使用点语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用点语法"}},[t._v("#")]),t._v(" 使用点语法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import React from 'react';\nconst MyComponents = {\n  DatePicker: function DatePicker(props) {\n    return <div>Imagine a {props.color} datepicker here.</div>;\n  }\n}\n\nfunction BlueDatePicker() {\n  return <MyComponents.DatePicker color=\"blue\" />;\n}\n")])])]),s("h2",{attrs:{id:"在运行时选择类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在运行时选择类型"}},[t._v("#")]),t._v(" 在运行时选择类型")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import React from 'react';\nimport { PhotoStory, VideoStory } from './stories';\n\nconst components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\n\nfunction Story(props) {\n  // 错误！JSX 类型不能是一个表达式。\n  return <components[props.storyType] story={props.story} />;\n  \n  // 正确！JSX 类型可以是大写字母开头的变量。\n  const SpecificStory = components[props.storyType];\n  return <SpecificStory story={props.story} />;\n}\n")])])]),s("h2",{attrs:{id:"字符串字面量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面量"}},[t._v("#")]),t._v(" 字符串字面量")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<MyComponent message=\"hello world\" />\n//等价的\n<MyComponent message={'hello world'} />\n\n<MyComponent message=\"&lt;3\" />\n//等价的，未转义的\n<MyComponent message={'<3'} />\n")])])]),s("h2",{attrs:{id:"props-默认值为-true"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-默认值为-true"}},[t._v("#")]),t._v(" Props 默认值为 “True”")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<MyTextBox autocomplete />      //推荐\n//等价的\n<MyTextBox autocomplete={true} />\n")])])]),s("h2",{attrs:{id:"属性展开"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性展开"}},[t._v("#")]),t._v(" ...属性展开")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function App1() {\n  return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n}\n//等价的\nfunction App2() {\n  const props = {firstName: 'Ben', lastName: 'Hector'};\n  return <Greeting {...props} />;\n}\n")])])]),s("p",[t._v("选择只保留当前组件需要接收的 props，并使用展开运算符将其他 props 传递下去。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const Button = props => {\n  const { kind, ...other } = props;\n  const className = kind === "primary" ? "PrimaryButton" : "SecondaryButton";\n  return <button className={className} {...other} />;\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Button kind="primary" onClick={() => console.log("clicked!")}>\n        Hello World!\n      </Button>\n    </div>\n  );\n};\n')])])]),s("h2",{attrs:{id:"jsx-中的子元素-props-children"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx-中的子元素-props-children"}},[t._v("#")]),t._v(" JSX 中的子元素(props.children)")]),t._v(" "),s("p",[t._v("SX 会移除行首尾的空格以及空行。与标签相邻的空行均会被删除，文本字符串之间的新行会被压缩为一个空格。因此以下的几种方式都是等价的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<div>Hello World</div>\n\n<div>\n  Hello World\n</div>\n\n<div>\n  Hello\n  World\n</div>\n\n<div>\n\n  Hello World\n</div>\n")])])]),s("p",[t._v("子元素可由字符串、dom元素、子组件组成、JavaScript 表达式、函数")]),t._v(" "),s("h5",{attrs:{id:"javascript-表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-表达式"}},[t._v("#")]),t._v(" JavaScript 表达式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<ul>\n    {todos.map((todo) => <Item key={todo.id} todo={todo} />)}\n</ul>\n\n//代替模板字符串\n<div>Hello {props.addressee}!</div>\n")])])]),s("h5",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 调用子元素回调 numTimes 次，来重复生成组件\nfunction Repeat(props) {\n  let items = [];\n  for (let i = 0; i < props.numTimes; i++) {\n    items.push(props.children(i));\n  }\n  return <div>{items}</div>;\n}\n\nfunction ListOfTenThings() {\n  return (\n    <Repeat numTimes={10}>\n      {(index) => <div key={index}>This is item {index} in the list</div>}\n    </Repeat>\n  );\n}\n")])])]),s("h5",{attrs:{id:"布尔类型、null-以及-undefined-将会忽略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型、null-以及-undefined-将会忽略"}},[t._v("#")]),t._v(" 布尔类型、Null 以及 Undefined 将会忽略")]),t._v(" "),s("p",[t._v("//以下的 JSX 表达式渲染结果相同：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<div />\n\n<div></div>\n\n<div>{false}</div>\n\n<div>{null}</div>\n\n<div>{undefined}</div>\n\n<div>{true}</div>\n")])])]),s("p",[t._v("应用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<div>\n  {showHeader && <Header />}\n  <Content />\n</div>\n")])])]),s("p",[t._v("值得注意的是有一些 “falsy” 值，如数字 0，仍然会被 React 渲染。例如，以下代码并不会像你预期那样工作，因为当 props.messages 是空数组时，0 仍然会被渲染：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<div>\n  {props.messages.length &&\n    <MessageList messages={props.messages} />\n  }\n</div>\n")])])]),s("p",[t._v("改")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<div>\n  {props.messages.length > 0 &&     //确定是布尔值\n    <MessageList messages={props.messages} />\n  }\n</div>\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);