(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{758:function(t,a,e){"use strict";e.r(a);var s=e(7),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1、组件名称必须以大写字母开头。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、组件名称必须以大写字母开头。"}},[t._v("#")]),t._v(" 1、组件名称必须以大写字母开头。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<Welcome name="Sara" />\n')])])]),e("h2",{attrs:{id:"_2、jsx-语法上更接近-javascript-而不是-html"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、jsx-语法上更接近-javascript-而不是-html"}},[t._v("#")]),t._v(" 2、JSX 语法上更接近 JavaScript 而不是 HTML")]),t._v(" "),e("p",[t._v("所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定。"),e("br"),t._v("\nclass ---\x3e className"),e("br"),t._v("\ntabindex ---\x3e tabIndex"),e("br"),t._v("\n例外"),e("br"),t._v("\naria-*"),e("br"),t._v("\ndata-*")]),t._v(" "),e("h2",{attrs:{id:"_3、props-的只读性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、props-的只读性"}},[t._v("#")]),t._v(" 3、Props 的只读性")]),t._v(" "),e("p",[t._v("所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。")]),t._v(" "),e("h2",{attrs:{id:"_4、正确使用state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、正确使用state"}},[t._v("#")]),t._v(" 4、正确使用State")]),t._v(" "),e("h5",{attrs:{id:"不要直接修改状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不要直接修改状态"}},[t._v("#")]),t._v(" 不要直接修改状态")]),t._v(" "),e("p",[t._v("构造函数是唯一可以给this.state赋值的地方")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//其他地方\n// Wrong\nthis.state.comment = 'Hello';\n// Correct\nthis.setState({comment: 'Hello'});\n")])])]),e("h5",{attrs:{id:"状态的更新可能是异步的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态的更新可能是异步的"}},[t._v("#")]),t._v(" 状态的更新可能是异步的")]),t._v(" "),e("p",[t._v("出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。"),e("br"),t._v("\n因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n// Correct\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n")])])]),e("h2",{attrs:{id:"_5、数据是向下流动的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、数据是向下流动的"}},[t._v("#")]),t._v(" 5、数据是向下流动的")]),t._v(" "),e("p",[t._v("组件可以选择把它的 state 作为 props 向下传递到它的子组件中：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<FormattedDate date={this.state.date} />\n")])])]),e("h2",{attrs:{id:"_6、注意回调中的this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、注意回调中的this"}},[t._v("#")]),t._v(" 6、注意回调中的this")]),t._v(" "),e("h5",{attrs:{id:"bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" bind")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // 为了在回调中使用 `this`，这个绑定是必不可少的\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n\nReactDOM.render(\n  <Toggle />,\n  document.getElementById('root')\n);\n")])])]),e("h5",{attrs:{id:"class-fields-实验性的语法-【create-react-app-默认启用此语法】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-fields-实验性的语法-【create-react-app-默认启用此语法】"}},[t._v("#")]),t._v(" class fields(实验性的语法)【Create React App 默认启用此语法】")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class LoggingButton extends React.Component {\n  // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n  // 注意: 这是 *实验性* 语法。\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n")])])]),e("h5",{attrs:{id:"在回调中使用箭头函数-避免使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在回调中使用箭头函数-避免使用"}},[t._v("#")]),t._v(" 在回调中使用箭头函数(避免使用)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // 此语法确保 `handleClick` 内的 `this` 已被绑定。\n    return (\n      <button onClick={(e) => this.handleClick(e)}>\n        Click me\n      </button>\n    );\n  }\n}\n")])])]),e("h2",{attrs:{id:"_7、向事件处理传递参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、向事件处理传递参数"}},[t._v("#")]),t._v(" 7、向事件处理传递参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n//e必须显式的进行传递\n\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n//事件对象e以及更多的参数将会被隐式的进行传递。\n")])])]),e("h2",{attrs:{id:"_8、key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、key"}},[t._v("#")]),t._v(" 8、key")]),t._v(" "),e("p",[t._v("key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。"),e("br"),t._v(" "),e("strong",[t._v("一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串")]),e("br"),t._v(" "),e("strong",[t._v("避免使用列表项的index作为key")])]),t._v(" "),e("h2",{attrs:{id:"_9、for-在-jsx-中应该被写作-htmlfor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9、for-在-jsx-中应该被写作-htmlfor"}},[t._v("#")]),t._v(" 9、for 在 JSX 中应该被写作 htmlFor")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<label htmlFor="namedInput">Name:</label>\n<input id="namedInput" type="text" name="name"/>\n')])])]),e("h2",{attrs:{id:"_10、将所有props向下传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10、将所有props向下传递"}},[t._v("#")]),t._v(" 10、将所有props向下传递")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//Button\nreturn (<button {...this.props} />)\n//使用\n<Button>点击</Button>\n//渲染\n<button>点击</button>   //this.props.children自动渲染进去\n")])])]),e("h2",{attrs:{id:"_11、v-show"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11、v-show"}},[t._v("#")]),t._v(" 11、v-show?")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<div>\n  {showHeader && <Header />}\n  <Content />\n</div>\n")])])]),e("h2",{attrs:{id:"_12、值得注意的是有一些-falsy-值-如数字-0-仍然会被-react-渲染。例如-以下代码并不会像你预期那样工作-因为当-props-messages-是空数组时-0-仍然会被渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12、值得注意的是有一些-falsy-值-如数字-0-仍然会被-react-渲染。例如-以下代码并不会像你预期那样工作-因为当-props-messages-是空数组时-0-仍然会被渲染"}},[t._v("#")]),t._v(" 12、值得注意的是有一些 “falsy” 值，如数字 0，仍然会被 React 渲染。例如，以下代码并不会像你预期那样工作，因为当 props.messages 是空数组时，0 仍然会被渲染：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<div>\n  {props.messages.length &&\n    <MessageList messages={props.messages} />\n  }\n</div>\n")])])]),e("p",[t._v("改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<div>\n  {props.messages.length > 0 &&     //确定是布尔值\n    <MessageList messages={props.messages} />\n  }\n</div>\n")])])]),e("h2",{attrs:{id:"_13、非受控默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13、非受控默认值"}},[t._v("#")]),t._v(" 13、非受控默认值")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('render() {\n  return (\n    <form onSubmit={this.handleSubmit}>\n      <label>\n        Name:\n        <input\n          defaultValue="Bob"\n          type="text"\n          ref={this.input} />\n      </label>\n      <input type="submit" value="Submit" />\n    </form>\n  );\n}\n//defaultChecked\n//defaultValue\n')])])]),e("h2",{attrs:{id:"_14、onchange"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14、onchange"}},[t._v("#")]),t._v(" 14、onChange")]),t._v(" "),e("p",[t._v("每当表单字段变化时，该事件都会被触发。类似于oninput")])])}),[],!1,null,null,null);a.default=n.exports}}]);